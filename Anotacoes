MySQL, Oracle, Postgre, SQLServer, MariaDB, MongDB e etc... (Tipos de banco de dados relacionais)

SGBD: Sistema Gerenciador de Banco de Dados;

DBA: DataBase Administrator;

SQL: Structured Query Language;
 -> DML: Data Manipulation Language;
 -> DDL: Data Definition Language;
 -> DQL: Data Query Language;

Site para baixar o SQL --> https://www.mysql.com/
Arraste até o final e Baixe o Server

Hostname: É o IP que a máquina interpreta como padrão, logo ela vai interpretar o local dela como ela mesma caso seja o ip 127.0.0.1, 
Imaginando que você está no WhatsApp, é como se você mandasse mensagem para sí mesmo.

DDL = Data Definition Language
DML = Data Manipulation Language
DQL = Data Query Language

ERP = significa Enterprise Resource Planning, ou seja, Planejamento dos Recursos da Empresa. É um software que automatiza processos,
armazena dados e unifica a visualização de resultados em uma única plataforma.

-------------------------Utilizando o MYSQL-------------------------

Hostname: é o ip da máquina mesmo pois será enviado para elas os dados, sendo o ip 127.0.0.1;

Porta padrão do MySQL: 3306;

Engenharia: Primeiro desenhar e depois construir;

Engenharia Reversa: Pega a construção e trasnforma no desenho;

-------------------------Modelagem de dados-------------------------

As técnicas de modelagem são usadas para registrar os dados nas mais diferentes níveis de abordagem. O objetivo da modelagem é dar difelidade à representação das "coisas do mundo" por meio do computador. Os dados podem mostrar toda sua elasticidade de assumir várias formas, dependendo do contexto que os envolvem.

 Modelo de dados é a representação gráfica e textual das estruturas, operadores e regras que definem os dados. Cada entidade deve ser vista como um conjunto que pode ou não ter relacionamento (associação) com outro conjunto. Um BD relacional consiste em uma coleção de objetivos básicos chamados tabelas e seus relacionamentos.

 Tabela: Conjunto único de atributos ou características, chamadas colunas.

 Relacionamento: Associação entre 2 ou mais tabelas.

--> Diagrama E/R (Entidade/Relacionamento)

Ferramenta para modelagem conceitual de BD amplamente utilizada em projetos, considerada praticamente um padrão de modelagem.

 Entidades: Componentes físicos e abstratos do mundo real, sobre os quais são armazenados os dados. Ex: Cliente, conta, banco, filme, etc.

 Atributo: Propriedade da entidade. Não tem vida própria. Existe para caracterizar uma entidade. Ex: Nome, valor, data nascimento, etc.

 Ocorrência: Conjunto de atributos de uma determinada entidade. Uma linha dentro da entidade. Ex: José da Silva, 25-02-1980 dentro da entidade cliente.

 Relacionamento: Correspondência entre entidades. Associação entre 2 ou mais conjuntos de dados. Ex: Uma conta está sempre associada a pelo menos 1 cliente.

 Identificador ou atributo determinante: Um atributo ou coleção de atributos que determina de modo único uma ocorrência de enteidade. Ex: Código de matrícula, CPF, CPNJ.

Atividade 1: Com base no exemplo desenvolvido no lab para o banco de dados PLANTS. Crie uma estrutura lógica de Banco de dados para uma imobiliária para armazenar os registros de seus imóveis.
Para isto crie uma tabela IMÓVEIS com as seguintes colunas:
- ID (int)
- Name (string)
- Description (string)
- Num de Quartos (int)
- Value (real/float)

Insira ao menos 10 registros de dados para esta entidade e aplique ao menos 3 tipos diferentes de consulta para exibição dos dados.

Exemplo do código do projeto 1 feito com o professor:

-- CRIAR BD
CREATE DATABASE GREENHOUSE;

-- DEFINIR BD COMO PADRÃO / UTILIZÁVEL INDICA O DATABASE QUE ELE VAI FAZER A PRÓXIMA ETAPA (NO MEU CASO, CRIAR UMA TABELA)
USE GREENHOUSE;

-- CRIAR TABELA/ENTIDADE
CREATE TABLE `PLANTS` ( -- Para nomes dentro do banco de dados utiliza crase
	`PLANT_NAME` CHAR(30) NOT NULL,
    `SENSOR_VALUE` FLOAT DEFAULT NULL,
    `SENSOR_EVENT` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY `PK_PLANTS` (`PLANT_NAME`)
);

-- VISUALIZAR TODAS AS OCORRÊNCIAS EM PLANTS
-- LISTAR TODOS OS REGISTROS DE DADOS
SELECT * FROM PLANTS;

-- VISUALIZAR COLUNAS ESPECÍFICAS
SELECT PLANT_NAME, SENSOR_VALUE, SENSOR_EVENT
FROM PLANTS;

-- INSERIR DADOS NA TABELA/ENTIDADE PLANTS
INSERT INTO PLANTS (PLANT_NAME, SENSOR_VALUE)
VALUES ('Rosa', 0.2319); -- Aspas simples para string

-- INSERIR MÚLTIPLAS LINHAS DE UMA VEZ
INSERT INTO PLANTS (PLANT_NAME, SENSOR_VALUE)
VALUES ('Cactus', '0.2411'), 
	   ('Girassol', '0.3112'),
       ('Orquídea', 0.4102),
       ('Lírio', 0.5566);

-- CONSULTA APLICANDO FILTROS
SELECT * 
FROM PLANTS
WHERE PLANT_NAME = 'Cactus';

-- FILTROS COMPOSTOS COM OPERADORES AND OR XOR ETC
SELECT *
FROM PLANTS
WHERE PLANT_NAME <> 'CANNABIS' -- <>: É o símbolo de diferente
AND SENSOR_VALUE < 0.5566
AND SENSOR_VALUE > 0.2411;

VARCHAR: Utiliza apenas o espaço utilizado;
CHAR: Utiliza o total estabelecido por mais que não utilize.

Cardinalidade: 1 para 1 (1:1), 1 para vários (1:N), e vários para vários(N:N) essa última é uma anomalia.

Estabelecer uma relação de chave primária e chave estrangeira serve para indicar uma relação, onde não permite criar um item sem ter uma informação na tabela pai, caso eu exclua uma item ele apaga de ambas as tabelas.


-- DEFININDO UMA FK APÓS TER CRIADO A TABELA
ALTER TABLE TRANSACAO
ADD FOREIGN KEY (ID_CONTA)
REFERENCES CONTA(ID);

-- CRIANDO INDEX (Serve para criar um tipo de filtro para pesquisar dps)
CREATE INDEX IDX_TRANSACAO_TP_TRANSACAO
ON TRANSACAO (TIPO_TRANSACAO);

ATIVIDADE - INDIVIDUAL

Com base no exemplo executado em laboratório para o Banco de Dados UNOESC BANK, com relacionamentos de cardinalidade 1:N monte um script de BD para o seguinte problema:

Uma empresa veterinária deseja criar um simples banco de dados para armazenar os registros dos TIPOS_ANIMAIS que atende, podendo ser CANINOS, FELINOS, SUÍNOS, CAPRINOS E EQUINOS, ETC onde cada TIPO_ANIMAL poderá ter vários ANIMAIS, para cada animal, você deve armazenar (ID, NOME, ID_TIPO_ANIMAL, DT_NASCIMENTO, COR, PESO, ALTURA).

Além disso, o BD deve armazenar um histórico de vacinação, onde ANIMAL pode ter 'N' VACINAS. Para a tabela VACINA, armazene (ID, NOME, DATA_APLICACAO, ID_ANIMAL [FK])

--------------------------------------------------------------

CREATE TABLE `ITEM_NOTA_FISCAL`(
	`NRO_NOTA` INT NOT NULL,
    `COD_PRODUTO` INT NOT NULL,
    `QTD_PRODUTO` INT NOT NULL,
    `VL_PRECO` FLOAT NOT NULL,
    PRIMARY KEY(NRO_NOTA, COD_PRODUTO), -- Uma única primary key porém ela é composta, foi utilizado aqui pois não se pode repetir o mesmo produto e o nro da nota, em vez de adicionar duas linhas de codigo 1, numero da nota 2, e qtde 1, deve-se colocar uma linha com o codigo 1, numero da nota 2 e a qtde 2.
    CONSTRAINT FK_NRO_NOTA_NOTA_FISCAL
		FOREIGN KEY (NRO_NOTA)
        REFERENCES NOTA_FISCAL (NRO_NOTA),
	CONSTRAINT FK_COD_PRODUTO_PRODUTO
		FOREIGN KEY (COD_PRODUTO)
        REFERENCES PRODUTO(COD_PRODUTO)
);

FAZENDO UPDATE COM WHERE NA TABELA PRODUTOS

SELECT * FROM `PRODUTO` WHERE COD_PRODUTO = 3;
UPDATE PRODUTO
SET VL_PRODUTO = 45
WHERE COD_PRODUTO = 3;

DELETANDO REGISTROS COM O DELETE

DELETE FROM PRODUTO
WHERE COD_PRODUTO = 3;

JOIN = SERVE PARA PERSONALIZAR MEU SELECT (FUNÇÃO DE RELATÓRIO)

LEFT JOIN: TABELA A e TABELA B = DADOS QUE ESTÃO NA TABELA "A" E QUE ESTÃO NA "A" E NA "B";

INNER JOIN: TABELA A e TABELA B = DADOS QUE ESTÃO APENAS NAS TABELAS "A" E "B";

RIGHT JOIN: DADOS QUE ESTÃO NA TABELA "B" E QUE ESTÃO NA "A" E NA "B";

FULL OUTER JOIN = RECEBE TUDO DE AMBAS TABELA "A" E "B"

CTRL + ENTER: DEPOIS DE SELECIONAR OS COMANDO PARA EXECUTAR;

ATIVIDADE 

COM BASE NO BANCO DE DADOS DE VETERINÁRIA, ELABORE CONSULTAS SQL PARA RESPONDER AS SEGUINTES QUESTÕES:

A) QUAL A QUANTIDADE DE ANIMAIS REGISTRADAS NO SISTEMA?

B) QUAL O TOTAL DE VACINAS APLICADAS REGISTRADAS NO SISTEMA?

C) QUANTOS ANIMAIS TEMOS AGRUPADOS REGISTRADOS PARA CADA CATEGORIA?

D) QUAL A CATEGORIA DE ANIMAIS QUE MAIS VACINAS RECEBEU?

ATV SEMINÁRIO

Com base no enunciado a seguir, elabore o diagrama de entidade e relacionamento do script de criação do banco de dados, e um script de semeadura de dados (Folha de código).

 Um simpósio será organizado na universidade. 
 \A organização é de responsabilidade de uma ou mais pessoas. 
 Serão apresentados nesse simpósio vários minicursos, e cada um deles será ministrado por apenas uma pessoa.
 Também serão aceitos artigos, sendo que cada um deles possuirá um tema (Banco de dados, redes, compiladores, realidade virtual e etc). 
 Estes artigos são escritos por no mínimo uma pessoa e não possuem limite de número de autores. 
 Cada artigo será encaminhado para uma comissão científica, sendo que há uma comissão científica para cada tema, que por sua vez é formada por uma ou mais pessoas, que emitirão um parecer sobre o artigo. 
 As pessoas se inscreverão no simpósio, podendo escolher se querem assistir os minicursos (E quais) e/ou palestras (E quais).

Precisamos entregar: 
Diagrama de entidade e relacionamento;
Script de semeadura de dados;

Normalização

Serve para analisar tabelas e organizá-las de modo que sua estrutura seja simples, relacional e estável, para que o gerenciamento possa ser eficiente e seguro. Os objetivos são evitar a perda e a repetição de informação e atingir uma forma de representação adequada para o que se deseja armazenar.

Técnica empregada para melhorar as estruturas de dados resultantes de um projeto de dados do sistema. Evita problemas de redundância e anomalia através da decomposição de uma entidade ou mais entidades.

As formas normais (FN) são as regras de normalização e podem ocasionar uma proliferação de entidades que nem sempre é o ideal do ponto de vista de performance, devendo ser balanceadas as vantagens e desvantagens antes da efetivação dos resultados de uma FN (NF). Assim, a normalização é um processo sistemático de geração de tabelas podendo ser aplicadas regras que vão da primeira até a quinta FN. Em grande parte dos casos, a aplicação da terceira forma normal já produz um conjunto de tabelas que organiza satisfatoriamente um schema. 

Para adequar uma tabela à uma FN deve-se redesenhar seu formato. A normalização também pode ser utilizada para projetar tabelas a partir de documentos, considerando-os como uma única tabela e aplicado-os as regras. 
Exemplo: Nota Fiscal 
nr. nota, 
nm. cliente, 
endereço, 
vendedor, 
data de emissão, 
produto 1, 
produto 2, 
produto n.

A tabela acima está desnormalizada, pois os campos, produto 1, produto 2 e o produto n não devem estar ali naquele local, pois a tabela continuará a crescer verticalmente, o que não é o correto.

1 Forma Normal: Ter apenas um dado em cada célula da tabela. Criar outra linha para essa informação.
2 Forma Normal: Onde existe primary key composta porém as outras colunas da tabela só dependem de uma primary key. Solução: Criar uma tabela separada.
3 Forma Normal: Onde uma coluna depende de outra que não é PK. Solução: Criar uma tabela separada.
